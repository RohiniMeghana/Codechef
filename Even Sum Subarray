Even Sum Subarray
Time Limit: 2, Memory Limit: 256000
Given an array A of size N, Find the size of the largest subarray of A which has even sum.
For example, if given an array A with [2, 1, 2] the answer is just 1, as the largest subarray with an even sum is [2].
Note a subarray is a contiguous part of an array. For the array [1, 3, 2] some possible subarrays are [1], [1, 3], [3, 2], [1, 3, 2]. However [1, 2] is not a subarray for this array.
Input
The first line of the input contains a single integer T, denoting the number of test cases.
Each test case consists of multiple line of input
 - The first line of each test case contains a single integer N - the size of the array.
 - The next line of the input contains N space-separated integers denoting an array A.

Constraints
1 ≤ T ≤ 103
1 ≤ N ≤ 105
1 ≤ Ai ≤ 105
Output
For each test case, output on a new line, the size of the largest subarray with even sum.
Example
Sample Input
2
3
2 1 2
6
2 2 1 1 1 2
Sample Output
1
4
Explanation
- For test case 1, the largest subarray with even sum is the subarray [2], having the size as 1.
- For test case 2, the largest subarray with even sum is the subarray [2, 2, 1, 1] having size as 4.

//program


import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt(); 
        
        while (T-- > 0) {
            int N = scanner.nextInt(); 
            int[] A = new int[N]; 
            
            for (int i = 0; i < N; i++) {
                A[i] = scanner.nextInt();
            }
            
          
            int maxLen = 0;
            int currentSum = 0;
            Map<Integer, Integer> mod2Index = new HashMap<>();
            mod2Index.put(0, -1); 
            
            for (int i = 0; i < N; i++) {
                currentSum += A[i];
                int mod2 = (currentSum % 2 + 2) % 2; 
                if (mod2Index.containsKey(mod2)) {
                    int prevIndex = mod2Index.get(mod2);
                    maxLen = Math.max(maxLen, i - prevIndex);
                } else {
                    mod2Index.put(mod2, i);
                }
            }
            
            System.out.println(maxLen);
        }
        
        scanner.close();
    }
}
