Sort it
Time Limit: 2, Memory Limit: 256000
You are given arrays A and B of sizes N and M respectively, such that 1 ≤ Bi ​≤ N. For each 1 ≤ i ≤ M.  Sort the suffix of length Bi in array A in non-decreasing order.
Output the resultant array A after all operations. Note that a suffix of length X denotes the subarray consisting of last X elements of the array.
Input
The first line consists of a single integer T, denoting the number of test cases.
The first line of each test case consists of two space-separated integers N and M, denoting the sizes of arrays A and B.
The second line of each test case consists of N space separated integers, denoting an array A.
The third line of each test case consists of M space separated integers, denoting an array B.

Constraints
1 ≤ T ≤ 103
1 ≤ N, M ≤ 103
1 ≤ Ai ≤ 107
1 ≤ Bi ≤ N
Output
For each test case, output N space-separated integers, denoting the resultant array A after all operations.
Example
Sample Input
1
5 1
2 3 4 6 1
2
Sample Output
2 3 4 1 6
Explanation
Initially A = [2, 3, 4, 6, 1]. After sorting the suffix of length 2, the array changes to A = [2, 3, 4, 1, 6].




//program
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        List<Integer> l=new ArrayList<>();
         List<Integer> l1=new ArrayList<>();
         List<Integer> l2=new ArrayList<>();
        for(int i=0;i<t;i++){
            int n=sc.nextInt();
            int m=sc.nextInt();
            int a[]=new int[n];
            int b[]=new int[m];
            for(int u=0;u<n;u++){
                a[u]=sc.nextInt();
            }
            for(int p=0;p<m;p++){
                b[p]=sc.nextInt();
            }
            Arrays.sort(b);
            for(int k=0;k<b.length;k++){
                l.add(b[k]);
            }
            int c=Collections.max(l);
            int d=a.length-c;
            for(int j=n-1;j>=d;j--){
                l1.add(a[j]);
            }
            Collections.sort(l1);
            for(int v=0;v<d;v++){
                l2.add(a[v]);
            }
            l2.addAll(l1);
        
 for(int s=0;s<l2.size();s++){
     System.out.print(l2.get(s)+" ");
 }
 System.out.println();
 l.clear();
 l1.clear();
 l2.clear();
        }
    }
}
