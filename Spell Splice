Spell Splice
Time Limit: 2, Memory Limit: 256000
Gaurav has N magic spells. The ith spell has a volatility of Vi​ and a strength of Ai​. When spells i and j (1 ≤ i < j ≤ N) are activated together, they merge to form a single spell of strength (Ai ​× Vj ​+ Vi​ × Aj​).
What's the maximum possible strength of a spell Chef can obtain by activating exactly two of his spells?

Input
The first line of input will contain a single integer T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains a single integer N, the number of spells.
The next N lines describe the spells. The ith of them contains two space-separated integers Vi and Ai - the volatility and strength of the ith spell.

Constraints
1 ≤ T ≤ 102
2 ≤ N ≤ 100
1 ≤ Ai, Vi ≤ 1000
Output
For each test case, output on a new line the maximum possible power of a combined spell.
Example
Sample Input
1
2
1 10
5 5
Sample Output
55
Explanation
Test case 1 There are only two spells. Combining them results in a spell of strength of 1×5 + 5×10 = 55.





import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        for(int i=0;i<t;i++){
            int m=0;
            int n=sc.nextInt();
            List<Integer> l=new ArrayList<>();
            int s=0;
            int[] a=new int[n];
            int[] v=new int[n];
            for(int p=0;p<n;p++){
                v[p]=sc.nextInt();
                a[p]=sc.nextInt();
                 
            }
    
            for(int j=0;j<n;j++){
                for(int k=j+1;k<n;k++){
                  
                     s=(a[j]*v[k])+(a[k]*v[j]);
                   if(s>m){
                       m=s;
                   }
                }
                
            }
            
            System.out.println(m);
        }
        
    }
}
